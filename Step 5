Okay, let's proceed with setting up the database connection and implementing the User model for the User Service. We'll be using SQLAlchemy, a powerful and popular Python SQL toolkit, to interact with our PostgreSQL database.

Phase 2: User Service Database and Model Implementation

Add SQLAlchemy and Psycopg2 to the User Service
In the user-service/requirements.txt file add the following lines:

fastapi
uvicorn
SQLAlchemy
psycopg2-binary
content_copy
download
Use code with caution.

and run docker-compose build user-service in the root directory (cotonou-marketplace).

Database Setup:

Create Database Configuration File (user-service/app/config.py):

import os

DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:postgres@localhost:5432/user_db")
DB_HOST = os.getenv("DB_HOST", "localhost")
content_copy
download
Use code with caution.
Python

Database Connection and Setup (user-service/app/database.py):

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

from .config import DATABASE_URL

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
content_copy
download
Use code with caution.
Python

Define User Model (user-service/app/models.py):

from sqlalchemy import Column, Integer, String, Enum, DateTime, func
from sqlalchemy.sql import expression
from .database import Base
import enum

class Role(str, enum.Enum):
   client = "client"
   retailer = "retailer"
   artisan = "artisan"
   admin = "admin"

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)
    full_name = Column(String, nullable=False)
    phone_number = Column(String, nullable=True)
    role = Column(Enum(Role), nullable=False)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())
content_copy
download
Use code with caution.
Python

Modify the main.py to initialize the database

from fastapi import FastAPI
from .database import engine, Base

from .routers import users #import router

Base.metadata.create_all(bind=engine)
app = FastAPI()


app.include_router(users.router) # add route to main app

@app.get("/")
async def root():
    return {"message": "Hello from user-service!"}
content_copy
download
Use code with caution.
Python

Add user Router
create a new folder user-service/app/routers and a new file user-service/app/routers/users.py with this content:

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from .. import models, schemas
from ..database import get_db
from ..utils import hash_password

router = APIRouter(prefix="/users", tags=["users"])


@router.post("/", response_model=schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    hashed_password = hash_password(user.password)
    db_user = models.User(**user.dict(), password=hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

@router.get("/", response_model=list[schemas.User])
def read_users(db: Session = Depends(get_db)):
    db_users = db.query(models.User).all()
    return db_users

@router.get("/{user_id}", response_model=schemas.User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(models.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user
content_copy
download
Use code with caution.
Python

Add user-service/app/schemas.py for API interaction.

from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime
from enum import Enum as PyEnum

class Role(str, PyEnum):
   client = "client"
   retailer = "retailer"
   artisan = "artisan"
   admin = "admin"

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str
    full_name: str
    phone_number: Optional[str] = None
    role: Role

class User(UserCreate):
    id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True

class UserUpdate(BaseModel):
    username: Optional[str] = None
    email: Optional[EmailStr] = None
    password: Optional[str] = None
    full_name: Optional[str] = None
    phone_number: Optional[str] = None
    role: Optional[Role] = None
content_copy
download
Use code with caution.
Python

Add user-service/app/utils.py to hash the user password

from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)
content_copy
download
Use code with caution.
Python

Changes Explanation:

SQLAlchemy: We're using SQLAlchemy for database interaction.

Database Config: The config.py file holds our database URL using env variables.

Database Setup (database.py): This file creates the engine, session, and base model.

User Model (models.py): Defines our User model, matching our database table structure.

FastAPI app The main.py now calls create_all to create the tables. Also it include the new router users.py which will manage the endpoint logic.

Router users.py: implement the logic to create, list and get one user.

Schemas schemas.py: define the pydantic models for each user data object, making api interaction easier.

Running the Application with database changes

Restart Docker Compose:

docker-compose down && docker-compose up --build
content_copy
download
Use code with caution.
Bash

This will restart the container with the new modifications made in user-service.

Access the user endpoint in http://localhost:8001/docs: You will now be able to test the endpoint in the swagger docs.

POST /users: Try to create a user using the UI.

GET /users: List all the created users.

GET /users/{id}: Get an existing user based on its ID.

Next Steps:

Test Endpoints: Use the swagger docs to test the /users endpoints.

Implement Update and Delete: Implement the PUT /users/{id} and DELETE /users/{id} endpoints in the user-service/app/routers/users.py file.

User Login Endpoint Implement the /users/login endpoint in user-service/app/routers/users.py file.

Let me know when you are done so that we can move to the next microservices.
