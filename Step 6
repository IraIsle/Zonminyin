Okay, let's keep the momentum going! We'll now implement the PUT /users/{id} (update), DELETE /users/{id} endpoints, and the /users/login endpoint in the user-service.

Phase 3: Completing User Service Functionality

Update user-service/app/routers/users.py:

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Annotated
from fastapi.security import OAuth2PasswordRequestForm
from .. import models, schemas
from ..database import get_db
from ..utils import hash_password, verify_password
from datetime import timedelta
from ..auth import create_access_token, Token

router = APIRouter(prefix="/users", tags=["users"])


@router.post("/", response_model=schemas.User, status_code=status.HTTP_201_CREATED)
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    hashed_password = hash_password(user.password)
    db_user = models.User(**user.dict(), password=hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

@router.get("/", response_model=list[schemas.User])
def read_users(db: Session = Depends(get_db)):
    db_users = db.query(models.User).all()
    return db_users

@router.get("/{user_id}", response_model=schemas.User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(models.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user


@router.put("/{user_id}", response_model=schemas.User)
def update_user(user_id: int, user: schemas.UserUpdate, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(models.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")

    for key, value in user.dict(exclude_unset=True).items():
            if key == "password":
                setattr(db_user,key, hash_password(value))
            else :
                setattr(db_user,key, value)
    db.commit()
    db.refresh(db_user)
    return db_user

@router.delete("/{user_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(models.User).filter(models.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    db.delete(db_user)
    db.commit()
    return

@router.post("/login", response_model=Token)
def login_for_access_token(form_data: Annotated[OAuth2PasswordRequestForm, Depends()], db: Session = Depends(get_db)):
    user = db.query(models.User).filter(models.User.username == form_data.username).first()
    if not user:
        raise HTTPException(status_code=400, detail="Incorrect username or password")

    if not verify_password(form_data.password, user.password):
        raise HTTPException(status_code=400, detail="Incorrect username or password")

    access_token_expires = timedelta(minutes=30)
    access_token = create_access_token(data={"sub": user.username}, expires_delta=access_token_expires)
    return {"access_token": access_token, "token_type": "bearer"}
content_copy
download
Use code with caution.
Python

user-service/app/auth.py for authentication function:

from datetime import datetime, timedelta
from typing import Annotated
from jose import JWTError, jwt

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from pydantic import BaseModel

SECRET_KEY = "09d25e094faa6ca2556c8183ade366303b3888e5cbc7c78ef00ab8a6"  # TODO : move to environment variable or secret management
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

class Token(BaseModel):
    access_token: str
    token_type: str


oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/users/login")

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


def decode_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate credentials")
        return username
    except JWTError:
         raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Could not validate credentials")


async def get_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
    username = decode_token(token)
    return username
content_copy
download
Use code with caution.
Python

schemas.py to add optional fields in user update model.

from pydantic import BaseModel, EmailStr
from typing import Optional
from datetime import datetime
from enum import Enum as PyEnum

class Role(str, PyEnum):
   client = "client"
   retailer = "retailer"
   artisan = "artisan"
   admin = "admin"

class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str
    full_name: str
    phone_number: Optional[str] = None
    role: Role

class User(UserCreate):
    id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True

class UserUpdate(BaseModel):
    username: Optional[str] = None
    email: Optional[EmailStr] = None
    password: Optional[str] = None
    full_name: Optional[str] = None
    phone_number: Optional[str] = None
    role: Optional[Role] = None
content_copy
download
Use code with caution.
Python

Changes Explanation:

Update Endpoint (PUT /users/{id}): We fetch the user, update the specified fields, and commit the changes to the database.

Delete Endpoint (DELETE /users/{id}): We fetch the user, and if it exists, we delete it from the database.

Login Endpoint (POST /users/login): We receive username and password, look the user up and check password, and if everything is okay we return an access token.

Authentication Function The /auth.py file implement the logic to generate and validate access tokens.

Running the Application with changes

Restart Docker Compose:

docker-compose down && docker-compose up --build
content_copy
download
Use code with caution.
Bash

This will restart the container with the new modifications made in user-service.

Access the user endpoint in http://localhost:8001/docs: You will now be able to test the endpoint in the swagger docs.

Try creating a user.

List the created user.

Get one user by id.

Update the user created.

Delete the user created.

Login a user to get the access token

Next Steps:

Test Endpoints: Use the swagger docs to test the newly added endpoints in the /users endpoints.

Implement the Location Service: We will now work on implementing the Location Service, with basic CRUD operation.

Add tests: add basic tests for the /users endpoints.

Let me know when you are done so that we can move to the next microservices.
